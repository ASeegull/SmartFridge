// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/ASeegull/SmartFridge/agent/proto/agentMessage.proto

/*
Package agentState is a generated protocol buffer package.

It is generated from these files:
	github.com/ASeegull/SmartFridge/agent/proto/agentMessage.proto

It has these top-level messages:
	Agentstate
	Product
	Setup
*/
package agentState

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Regular message, that is sent on heartbeat
type Agentstate struct {
	AgentID      string `protobuf:"bytes,1,opt,name=agentID" json:"agentID,omitempty"`
	User         string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Product      string `protobuf:"bytes,3,opt,name=product" json:"product,omitempty"`
	Weight       string `protobuf:"bytes,4,opt,name=weight" json:"weight,omitempty"`
	StateExpires string `protobuf:"bytes,5,opt,name=stateExpires" json:"stateExpires,omitempty"`
}

func (m *Agentstate) Reset()                    { *m = Agentstate{} }
func (m *Agentstate) String() string            { return proto.CompactTextString(m) }
func (*Agentstate) ProtoMessage()               {}
func (*Agentstate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Agentstate) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *Agentstate) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Agentstate) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Agentstate) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Agentstate) GetStateExpires() string {
	if m != nil {
		return m.StateExpires
	}
	return ""
}

// Changes product of container
type Product struct {
	User    string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	AgentID string `protobuf:"bytes,2,opt,name=agentID" json:"agentID,omitempty"`
	Product string `protobuf:"bytes,3,opt,name=product" json:"product,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Product) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Product) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *Product) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

// Regiters user and agent
type Setup struct {
	User      string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	AgentID   string `protobuf:"bytes,2,opt,name=agentID" json:"agentID,omitempty"`
	Heatrbeat int32  `protobuf:"varint,3,opt,name=heatrbeat" json:"heatrbeat,omitempty"`
}

func (m *Setup) Reset()                    { *m = Setup{} }
func (m *Setup) String() string            { return proto.CompactTextString(m) }
func (*Setup) ProtoMessage()               {}
func (*Setup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Setup) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Setup) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *Setup) GetHeatrbeat() int32 {
	if m != nil {
		return m.Heatrbeat
	}
	return 0
}

func init() {
	proto.RegisterType((*Agentstate)(nil), "agentState.agentstate")
	proto.RegisterType((*Product)(nil), "agentState.product")
	proto.RegisterType((*Setup)(nil), "agentState.setup")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Agent service

type AgentClient interface {
	GetState(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Agentstate, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetState(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Agentstate, error) {
	out := new(Agentstate)
	err := grpc.Invoke(ctx, "/agentState.agent/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentServer interface {
	GetState(context.Context, *Product) (*Agentstate, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentState.agent/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetState(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentState.agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Agent_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ASeegull/SmartFridge/agent/proto/agentMessage.proto",
}

// Client API for Settings service

type SettingsClient interface {
	SetProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Setup, error)
	SetUser(ctx context.Context, in *Setup, opts ...grpc.CallOption) (*Agentstate, error)
}

type settingsClient struct {
	cc *grpc.ClientConn
}

func NewSettingsClient(cc *grpc.ClientConn) SettingsClient {
	return &settingsClient{cc}
}

func (c *settingsClient) SetProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Setup, error) {
	out := new(Setup)
	err := grpc.Invoke(ctx, "/agentState.settings/SetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SetUser(ctx context.Context, in *Setup, opts ...grpc.CallOption) (*Agentstate, error) {
	out := new(Agentstate)
	err := grpc.Invoke(ctx, "/agentState.settings/SetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Settings service

type SettingsServer interface {
	SetProduct(context.Context, *Product) (*Setup, error)
	SetUser(context.Context, *Setup) (*Agentstate, error)
}

func RegisterSettingsServer(s *grpc.Server, srv SettingsServer) {
	s.RegisterService(&_Settings_serviceDesc, srv)
}

func _Settings_SetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentState.settings/SetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentState.settings/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetUser(ctx, req.(*Setup))
	}
	return interceptor(ctx, in, info, handler)
}

var _Settings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentState.settings",
	HandlerType: (*SettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetProduct",
			Handler:    _Settings_SetProduct_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _Settings_SetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ASeegull/SmartFridge/agent/proto/agentMessage.proto",
}

func init() {
	proto.RegisterFile("github.com/ASeegull/SmartFridge/agent/proto/agentMessage.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcb, 0x6a, 0xe3, 0x30,
	0x14, 0xc5, 0x99, 0x38, 0x8f, 0xcb, 0x30, 0x43, 0x14, 0xc8, 0x78, 0x42, 0x16, 0x45, 0xab, 0x92,
	0x85, 0x0d, 0xe9, 0x2e, 0x8b, 0x42, 0xa1, 0x0f, 0xba, 0x28, 0x4d, 0x63, 0xba, 0xe8, 0x52, 0x49,
	0x2e, 0x8a, 0x21, 0xb1, 0x8c, 0x75, 0x4d, 0xbb, 0xee, 0x17, 0x14, 0xfa, 0x21, 0xfd, 0x98, 0xfe,
	0x42, 0x3f, 0xa4, 0x58, 0x52, 0xe2, 0x84, 0x36, 0x8b, 0xee, 0x74, 0xcf, 0x3d, 0x3e, 0xe7, 0xe8,
	0x58, 0x70, 0x2a, 0x13, 0x5a, 0x16, 0xb3, 0x70, 0xae, 0xd6, 0xd1, 0x59, 0x8c, 0x28, 0x8b, 0xd5,
	0x2a, 0x8a, 0xd7, 0x22, 0xa7, 0xcb, 0x3c, 0x59, 0x48, 0x8c, 0x84, 0xc4, 0x94, 0xa2, 0x2c, 0x57,
	0xa4, 0xec, 0xf9, 0x06, 0xb5, 0x16, 0x12, 0x43, 0x03, 0x31, 0x30, 0x58, 0x4c, 0x82, 0xb0, 0x3f,
	0x90, 0x4a, 0xc9, 0x15, 0x46, 0x22, 0x4b, 0x22, 0x91, 0xa6, 0x8a, 0x04, 0x25, 0x2a, 0xd5, 0x96,
	0xc9, 0x5f, 0x3c, 0xb0, 0x64, 0x5d, 0x92, 0x59, 0x00, 0x4d, 0x33, 0x5d, 0x9f, 0x07, 0xde, 0x91,
	0x77, 0xdc, 0x9e, 0x6e, 0x46, 0xc6, 0xa0, 0x5e, 0x68, 0xcc, 0x83, 0x9a, 0x81, 0xcd, 0xb9, 0x64,
	0x67, 0xb9, 0x5a, 0x14, 0x73, 0x0a, 0x7e, 0x59, 0xb6, 0x1b, 0x59, 0x0f, 0x1a, 0x8f, 0x98, 0xc8,
	0x25, 0x05, 0x75, 0xb3, 0x70, 0x13, 0xe3, 0xf0, 0xdb, 0x18, 0x5d, 0x3c, 0x65, 0x49, 0x8e, 0x3a,
	0xf0, 0xcd, 0x76, 0x0f, 0xe3, 0x77, 0x5b, 0xd5, 0xad, 0xa9, 0xb7, 0x6f, 0xba, 0x89, 0x58, 0xdb,
	0x8f, 0x78, 0x30, 0x0e, 0x8f, 0xc1, 0xd7, 0x48, 0x45, 0xf6, 0x43, 0xc1, 0x01, 0xb4, 0x97, 0x28,
	0x28, 0x9f, 0xa1, 0xb0, 0x92, 0xfe, 0xb4, 0x02, 0x46, 0x0f, 0xe0, 0x1b, 0x22, 0x9b, 0x40, 0xeb,
	0x0a, 0x6d, 0xdb, 0xac, 0x1b, 0x56, 0xd5, 0x87, 0xce, 0xbe, 0xdf, 0xdb, 0x05, 0xab, 0xb6, 0xf9,
	0xbf, 0xe7, 0xf7, 0x8f, 0xd7, 0x5a, 0x87, 0xfd, 0x75, 0xff, 0x53, 0xa2, 0x5d, 0x8c, 0xde, 0x3c,
	0x68, 0x69, 0x24, 0x4a, 0x52, 0xa9, 0xd9, 0x14, 0x20, 0x46, 0x9a, 0xb8, 0x4a, 0xbe, 0x35, 0xe8,
	0xec, 0x82, 0xe6, 0xa6, 0x7c, 0x60, 0xb4, 0x7b, 0xbc, 0xe3, 0xb4, 0x35, 0x92, 0x63, 0x8f, 0xbd,
	0x21, 0xbb, 0x85, 0x66, 0x8c, 0x74, 0x5f, 0x5e, 0xff, 0xeb, 0xb7, 0x07, 0xf3, 0xfe, 0x37, 0x9a,
	0x5d, 0xfe, 0xa7, 0xd2, 0x2c, 0x1b, 0x1c, 0x7b, 0xc3, 0x59, 0xc3, 0x3c, 0xa7, 0x93, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3f, 0x0d, 0xc4, 0xe7, 0xba, 0x02, 0x00, 0x00,
}
